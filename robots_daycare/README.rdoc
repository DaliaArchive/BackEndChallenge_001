Robots Daycare

The inspectors API

This API has 4 methods and provides a JSON response.

[Update] update a robot's attributes

The robot XX1 is already in our system and has the following attributes:

size: 100cm
weight: 10kg
status: good conditions
color: white
age: 123years
The inspector checks the robot and decides to update his attributes and sends the following information:

color: dirty white
age: 124years
number of eyes: 1
number of antenna: 2
The robot XX1 now has these attributes:

size: 100cm
weight: 10kg
status: good conditions
color: dirty white
age: 124years
number of eyes: 1
number of antennas: 2
Be aware that the attributes are not predefined and can be anything on both sides: key and value.

[Show] get a robot's actual attributes

The inspector wants to know about the actual attributes of a robot

Example

The inspector asks for the robot XX1 and the system responses with the following information:

size: 100cm
weight: 10kg
status: good conditions
color: dirty white
age: 124years
number of eyes: 1
number of antennas: 2
[Index] get a list of all the robot's in our database

The inspector wants to have an overview of all the robot's in our database.

Example

The inspector makes the call and the system responses with the following information:

1

name: XX1
last_update: 2113-12-01
2

name: XX2
last_update: 2113-12-03
3

name: XX3
last_update: 2113-12-12
[History] get a robot's attributes changes

The inspector is interested in knowing about the evolution of the robot, so he asks for the changes on the attributes that have been done for this specific robot.

Example:

The inspector asks for the history of the robot XX1, the system responses with the following information:

2112-11-28 10:23:24

type: create
changes:
size: [] -> [100cm]
weight: [] -> [10kg]
status: [] -> [good conditions]
color: [] -> [white]
age: [] -> [123years]
2113-12-02 16:30:11

type: update
changes:
color: [white] -> [dirty white]
age: [123years] -> [124years]
number of eyes: [] -> [1]
number of antennas: [] -> [2]
The API details

You can make your own decision on the details of your API. You can define the URLs, request methods, headers, response types, response formats, etc.

You don't even have to follow the information structures showed in the examples above. Use whatever structure you think is best, however just make sure that your proposition includes all the information in the examples.

Programming Requirements

Must be Ruby... frameworks, gems, databases are all up to you.

What we assess

Legible, understandable and maintainable code
Wisely choosen tools, techniques and/or frameworks